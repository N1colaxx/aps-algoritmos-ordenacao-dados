# === IMPORTA√á√ïES DE BIBLIOTECAS ===
import os                     # Fornece fun√ß√µes para interagir com o sistema operacional
import sys                    # Permite manipular o sistema e o interpretador (ex: caminhos de m√≥dulos)
import importlib              # Usado para importar m√≥dulos dinamicamente em tempo de execu√ß√£o
import time                   # Usado para medir o tempo de execu√ß√£o de algoritmos
from pathlib import Path      # Facilita o trabalho com caminhos de arquivos e diret√≥rios
import pandas as pd           # Biblioteca para manipula√ß√£o de dados em tabelas
import matplotlib.pyplot as plt  # Biblioteca para criar gr√°ficos
from datetime import datetime # Para capturar data e hora atuais

# === DEFINI√á√ÉO DE CAMINHOS BASE ===
BASE_DIR = Path(__file__).resolve().parents[1]  # Caminho da pasta "pai" do arquivo atual
SCRIPTS_DIR = BASE_DIR / "scripts"              # Caminho da pasta onde est√£o os scripts de algoritmos
RESULTS_FILE = BASE_DIR / "resultados.xlsx"     # Caminho do arquivo Excel onde os resultados s√£o salvos
GRAFICO_FILE = BASE_DIR / "grafico_medias.png"  # Caminho do arquivo de imagem do gr√°fico

# Adiciona a pasta 'scripts' ao caminho de m√≥dulos do Python
sys.path.insert(0, str(SCRIPTS_DIR))

# Dicion√°rio com as op√ß√µes de algoritmos dispon√≠veis
AVAILABLE = {
    "1": ("quicksort", "QuickSort"),
    "2": ("mergesort", "MergeSort"),
    "3": ("heapsort", "HeapSort")
}


# === FUN√á√ÉO PARA SALVAR RESULTADOS NO EXCEL ===
def salvar_resultado_excel(algoritmo: str, tempo_execucao: float):
    """Salva o tempo de execu√ß√£o no arquivo Excel e atualiza o gr√°fico de m√©dias."""
    
    # Cria um dicion√°rio com os dados da execu√ß√£o
    dados = {
        "Algoritmo": [algoritmo],
        "Tempo (s)": [tempo_execucao],
        "Data/Hora": [datetime.now().strftime("%d/%m/%Y %H:%M:%S")]  # Data e hora formatadas
    }

    # Converte o dicion√°rio em um DataFrame (tabela)
    df_novo = pd.DataFrame(dados)

    # Se o arquivo de resultados j√° existir, ele √© lido e atualizado
    if RESULTS_FILE.exists():
        df_existente = pd.read_excel(RESULTS_FILE)
        # Junta os dados novos aos antigos
        df_final = pd.concat([df_existente, df_novo], ignore_index=True)
    else:
        # Se o arquivo n√£o existe, cria um novo
        df_final = df_novo

    # Salva a tabela atualizada no Excel
    df_final.to_excel(RESULTS_FILE, index=False)

    print(f"üìä Resultado salvo em: {RESULTS_FILE.name}")

    # Atualiza o gr√°fico de m√©dias com os novos dados
    gerar_grafico_medias(df_final)


# === FUN√á√ÉO PARA GERAR GR√ÅFICO DE M√âDIAS ===
def gerar_grafico_medias(df):
    """Gera e salva um gr√°fico mostrando o tempo m√©dio de execu√ß√£o de cada algoritmo."""
    
    # Calcula a m√©dia dos tempos de execu√ß√£o por algoritmo
    medias = df.groupby("Algoritmo")["Tempo (s)"].mean().sort_values()

    # Define o tamanho da figura
    plt.figure(figsize=(7, 5))
    
    # Cria as barras do gr√°fico (cor preta)
    barras = plt.bar(medias.index, medias.values, color='black')

    # Define t√≠tulo e r√≥tulos dos eixos
    plt.title("Tempo m√©dio das execu√ß√µes", fontsize=15)
    plt.ylabel("Tempo m√©dio (segundos)")
    plt.xlabel("Algoritmo")

    # Adiciona o valor de cada barra acima dela
    for barra in barras:
        plt.text(barra.get_x() + barra.get_width()/2,  # posi√ß√£o X central da barra
                 barra.get_height(),                   # altura da barra
                 f"{barra.get_height():.4f}s",         # valor formatado (4 casas decimais)
                 ha='center', va='bottom',             # alinhamento horizontal e vertical
                 color='black', fontsize=9, fontweight='bold')  

    # Ajusta o layout e salva o gr√°fico em arquivo
    plt.tight_layout()
    plt.savefig(GRAFICO_FILE)
    plt.close()

    print(f"üìà Gr√°fico de m√©dias atualizado: {GRAFICO_FILE.name}")


# === FUN√á√ÉO PARA EXECUTAR O SCRIPT ESCOLHIDO ===
def run_script(option: str):
    """Executa o algoritmo escolhido pelo usu√°rio e mede seu tempo."""
    
    if option not in AVAILABLE:
        print("‚ö†Ô∏è Op√ß√£o inv√°lida.")
        return

    # Obt√©m o nome do m√≥dulo (arquivo .py) e o r√≥tulo amig√°vel
    module_name, label = AVAILABLE[option]

    try:
        # Importa dinamicamente o m√≥dulo (ex: quicksort.py)
        module = importlib.import_module(module_name)
    except Exception as e:
        print(f"‚ùå Erro ao importar o script '{module_name}': {e}")
        return

    # Verifica se o m√≥dulo possui uma fun√ß√£o chamada run()
    if not hasattr(module, "run"):
        print(f"‚ùå O m√≥dulo '{module_name}' n√£o possui a fun√ß√£o run().")
        return

    print(f"\n--- {label} ---")

    try:
        # Marca o in√≠cio da execu√ß√£o
        inicio = time.perf_counter()

        # Executa o algoritmo (fun√ß√£o run() do script)
        module.run()

        # Marca o final e calcula o tempo total
        fim = time.perf_counter()
        tempo_exec = fim - inicio

        print(f"‚úÖ Tempo de execu√ß√£o: {tempo_exec:.6f} segundos")

        # Salva o resultado no Excel e atualiza o gr√°fico
        salvar_resultado_excel(label, tempo_exec)

    except Exception as e:
        print(f"‚ùå Erro durante a execu√ß√£o: {e}")


# === FUN√á√ÉO PRINCIPAL (MENU INTERATIVO) ===
def main():
    """Exibe o menu principal e permite ao usu√°rio escolher o algoritmo para executar."""
    
    while True:
        print("\n===== MENU PRINCIPAL =====")
        for k, (_, label) in AVAILABLE.items():
            print(f"{k} - {label}")
        print("0 - Sair")

        # Solicita a escolha do usu√°rio
        opc = input("Escolha uma op√ß√£o: ").strip()

        # Encerra o programa
        if opc == "0":
            print("Saindo...")
            break

        # Valida entrada
        if opc not in AVAILABLE:
            print("‚ö†Ô∏è Entrada inv√°lida! Digite um n√∫mero entre 0 e 3.")
            continue

        # Executa o algoritmo selecionado
        run_script(opc)


# === PONTO DE ENTRADA DO PROGRAMA ===
if __name__ == "__main__":
    main()
